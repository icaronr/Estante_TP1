#ifndef CONTROLADORAS_H_INCLUDED
#define CONTROLADORAS_H_INCLUDED

#include "interfaces.h"
#include "dominios.h"
#include "unidadePersistencia.h"
#include "global.h"

#include <stdexcept>
#include <iostream>
#include <cstdlib>
#include <list>

using namespace std;


/// Classe controladora de intera√ß√£o para o servi√ßo de autentica√ß√£o.

class CntrIUAutenticacao:public IUAutenticacao {

private:

    /**
    * Ponteiro para a controladora de autentica√ß√£o na camada de neg√≥cio.
    */
    ILNAutenticacao *cntrLNAutenticacao;

public:

    /**
     * Este m√©todo p√∫blico realiza o contato com o usu√°rio para solicitar seus dados para cadastro.
     * Primeiro utiliza os servi√ßos de entrada e sa√≠da no console para solicitar apelido, senha, nome e telefone.
     * Em seguida envia para a autentica√ß√£o no servi√ßo de l√≥gica de neg√≥cio ("cntrLNAutenticacao->cadastrar()").
     * O m√©todo determina se a autentica√ß√£o falhou (resultado = 1) ou obteve sucesso (resultado = 0).
     * Retorna um objeto do tipo "ResultadoAutenticacao" com o apelido do usu√°rio que tentou o acesso e o resultado da solicita√ß√£o.
     */
    ResultadoAutenticacao cadastrar() throw(runtime_error);

    /**
     * Este m√©todo realiza o contato com o usu√°rio para solicitar seus dados para autentica√ß√£o.
     * Primeiro utiliza os servi√ßos de entrada e sa√≠da no console para solicitar apelido e senha.
     * Em seguida envia para a autentica√ß√£o no servi√ßo de l√≥gica de neg√≥cio ("cntrLNAutenticacao->autenticar()").
     * O m√©todo determina se a autentica√ß√£o falhou (resultado = 1) ou obteve sucesso (resultado = 0).
     * Retorna um objeto do tipo "ResultadoAutenticacao" com o apelido do usu√°rio que tentou o acesso e o resultado da solicita√ß√£o.
     */
    ResultadoAutenticacao autenticar() throw(runtime_error);

    void setCntrLNAutenticacao(ILNAutenticacao*);
};


void inline CntrIUAutenticacao::setCntrLNAutenticacao(ILNAutenticacao *cntrLNAutenticacao){
        this->cntrLNAutenticacao = cntrLNAutenticacao;
}


/// Declara√ß√£o de controladora de intera√ß√£o para o servi√ßo de gerentes.

class CntrIUUsuario:public IUUsuario {

private:

    const static int EXIBIR    = 0; /**< Valor constante para exibicao. */
    const static int INCLUIR   = 1; /**< Valor constante para inclus√£o. */
    const static int REMOVER   = 2; /**< Valor constante para remo√ß√£o. */
    const static int CONSULTAR = 3; /**< Valor constante para consulta. */
    const static int ESCREVER  = 4; /**< Valor constante para escrita. */
    const static int PESQUISAR  = 5; /**< Valor constante para pesquisa. */
    const static int TROCAR    = 6; /**< Valor constante para troca. */
    const static int RETORNAR  = 7; /**< Valor constante para retorno. */

    /**
    * Ponteiro para conectar a interface de usu√°rio com a controladora de neg√≥cio.
    */
    ILNUsuario *cntrLNUsuario;

public:

    /**
    * Este m√©todo recebe como par√¢metro o apelido do usu√°rio que vai selecionar uma opcao a ser executada.
    * √â apresentada uma tela ao usu√°rio com as diversas op√ß√µes de a√ß√£o no programa numeradas de 1 a 7.
    * A op√ß√£o selecionada √© armazenada no inteiro "opcao", que selecionar√° o m√©todo correto a ser chamado.
    * A depender da op√ß√£o, o respectivo comando de l√≥gica de negocio √© chamado. No caso da op√ß√£o "RETORNAR",
    * o programa √© simplesmente encerrado. O m√©todo n√£o returna nenhum valor.
    */
    void executar(const Apelido&) throw(runtime_error);

    /**
    * M√©todo por meio do qual √© estabelecido relacionamento com o servidor.
    */
    void setCntrLNUsuario(ILNUsuario *cntrLNUsuario){
        this->cntrLNUsuario = cntrLNUsuario;
    }
};

/// Classe controladora de servi√ßos da interface de autentica√ß√£o a n√≠vel de neg√≥cio.

class CntrLNAutenticacao:public ILNAutenticacao{

public:

    /**
    * M√©todo que realiza a etapa de interface com usu√°rio do cadastro. Recebe como par√¢metro
    * um objeto "usuario". Solicita ao usu√°rio a entrada de um apelido e senha. O objeto "usuario"
    * √© preenchido com esses dados e passado como par√¢metro para o comando de pesquisa de usu√°rio.
    * Se o comando de pesquisa encontra usu√°rio com esses dados, o m√©todo informa que o nome est√° em uso.
    * Caso contr√°rio o usu√°rio √© cadastrado. O m√©todo retorna o resultado do cadastro.
    */
    Resultado cadastrar(const Usuario&) throw(runtime_error);

    /**
    * M√©todo que realiza a etapa de interface com usu√°rio da autentica√ß√£o. Recebe como par√¢metro
    * um objeto "usuario". Solicita ao usu√°rio a entrada de um apelido e senha. O objeto "usuario"
    * √© preenchido com esses dados e passado como par√¢metro para o comando de pesquisa de usu√°rio.
    * Se o comando de pesquisa encontra usu√°rio com esses dados, o usu√°rio √© autenticado.
    * Caso contr√°rio o usu√°rio √© cadastrado. O m√©todo retorna o resultado da autentica√ß√£o.
    */
    Resultado autenticar(const Apelido&, const Senha&) throw(runtime_error);

};

/// Classe controladora dos servi√ßos dispon√≠veis ao usu√°rio ap√≥s a autentica√ß√£o.

class CntrLNUsuario:public ILNUsuario{  // classe implementa a interface.

public:

    /**
    * M√©todo respons√°vel por incluir um livro na estante do usu√°rio.
    * Recebe como par√¢metro um objeto "livro". Pesquisa se o usuario, armazenado em
    * "usuarioAtual" atingiu o limite de livros na biblioteca. Se sim, retorna esse resultado
    * sem incluir o livro.
    * Pesquisa se o usuario j√° posusi um exemplar daquele livro na estante virtual. Se sim,
    * retorna esse resultado sem incluir o livro.
    * Na negativa dos dois casos acima, consulta se o livro j√° est√° cadastrado.
    * Caso contr√°rio, cadastra o exemplar. Se h√° erro ao cadastrar o exemplar, retorna.
    * No sucesso do cadastro, retorna o resultado de sucesso.
    */
    Resultado incluir(const Livro&) throw(runtime_error);

    /**
    * M√©todo respons√°vel por remover um livro da estante do usu√°rio.
    * Recebe como par√¢metro um objeto "codigo". Pesquisa o livro na estante do usu√°rio,
    * armazenando-o em "livroRecuperado. Caso n√£o encontre, retorna mensagem de erro e o
    * resultado negativo.
    * Executa o comando de remo√ß√£o do livro e retorna o resultado da remo√ß√£o.
    */
    Resultado remover(const Codigo&) throw(runtime_error);
    ResultadoLivro consultar(const Codigo&) throw(runtime_error);
    ResultadoResenha escrever(const Titulo&, const Texto&, const Data&) throw(runtime_error);
    ResultadoUsuario pesquisar(const Apelido&) throw(runtime_error);
    ResultadoUsuario trocar(const Titulo&, const int) throw(runtime_error);
    /**
    *MÈtodo respons·vel por recuperar os dados acerca da estante do usu·rio atual.
    *Carrega os exemplares encontrados no banco de dados que possuem o apelido do usuario
    */
    Resultado contabilizar() throw(runtime_error);
};


#endif // CONTROLADORAS_H_INCLUDED
